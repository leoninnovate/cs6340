Leann EstradaGATech CS6340Fall 2016Assignment 71. There are two bugs represented in this report. This is because of two reasons. Firstly, there are two top-level predicates. Secondly, upon reviewing each of the affinity lists for the two top-level predicates, most of the effective scores of the predicates are zero, indicating they refer to the same bugs.2.asgn7$ . ./src/jpegtran -outfile testout.jpg -flip vertical testimg.jpgSegmentation fault: 11asgn7$ ./src/jpegtran -outfile testout.jpg -transverse testimg.jpg Bogus virtual array access3.The first top-level predicate associated with a bug is “info->transform == 2 is TRUE”, found in function jtransform_request_workspace  (transupp.c, line 585). When that predicate is true, the variable info->workspace_coef_arrays is set to NULL. Later in the execution, in the function jtransform_execute_transformation (transupp.c), the info->workspace_coef_arrays variable is used to initialize the variable dst_coef_arrays. The variable dst_coef_arrays is then passed to do_flip_v (transupp.c), the transform function that is called when the predicate is true, or in other words when the user passed the “-flip vertical” option. Within do_flip_v, elements of dst_coef_arrays are accessed (line 142). However, since dst_coef_arrays is NULL, this throws a memory access error. It is important to note that the no flip and flip horizontal options do not require the use of dst_coef_arrays, and this is why those options do not also throw an error even though they also pass through the if statement where the top-level predicate is found. To fix this bug, info->workspace_coef_arrays must be properly initialized when the user passes the “-flip vertical” option.The second top-level predicate associated with a bug is “info->transform == 4 is TRUE”, found in function jtransform_request_workspace  (transupp.c, line 592). When that predicate is true, the variable info->workspace_coef_arrays is set “having same dimensions as source image”.  Later in the execution, in the function jtransform_execute_transformation (transupp.c), the info->workspace_coef_arrays variable is used to initialize the variable dst_coef_arrays. The variable dst_coef_arrays is then passed to do_transverse (transupp.c), the transform function that is called when the predicate is true, or in other words when the user passed the “-transverse” option. Within do_transverse, the variable dst_buffer is allocated using the function access_virt_barray (jmemmgr.c), passing in dst_coef_arrays of the current component as ptr. Within access_virt_barray, the “Bogus virtual array access” error is thrown (line 853) because the first check, or if statement, fails, namely the predicate “end_row > ptr->rows_in_array”. ptr->rows_in_array is incorrectly set because jtransform_request_workspace  set the destination dimensions to be the same as those of the source image. However, the transverse operation requires a transposition operation, which by definition inverts the dimensions. Thus, the row that is attempting to be accessed in the virtual array does not exist, resulting in the error. To fix this bug, info->workspace_coef_arrays must be properly initialized with the maximum dimension of the source image as both dimensions when the user passes the “-transverse” option.